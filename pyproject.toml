[project]
name = "discord-rolebot"
requires-python = ">=3.12"

[tool.ruff]

line-length = 120
target-version = "py312"
select = [
    "F", "E", "I", "UP", "YTT", "ANN", "S", "BLE", "B", "A", "COM", "C4", "DTZ",
    "EM", "ISC", "G", "INP", "PIE", "T20", "Q003", "RSE", "RET", "SIM", "TID", "PTH",
    "ERA", "PD", "PLC", "PLE", "PLR", "PLW", "TRY", "NPY", "RUF"
]
ignore = [
    "G002",  # erroneous issue with %-logging when logging can be confiured for % logging
    "S101",  # use of assert here is a known quantity, blame typing memes
    "PLR2004",  # Magic value comparison, may remove later
    "SIM105",  # supressable exception, I'm not paying the overhead of contextlib.supress for stylistic choices.
    "SIM108", # ternary
    "C90",  # mccabe complexity memes
    'COM812', 'COM819', 'E501', 'ISC001', 'Q003',  # ruff format
    "ANN101", "ANN204",  # pyright will tell me if this is needed, thanks
    "RUF001",
]
unfixable = [
    "ERA"  # I don't want anything erroneously detected deleted by this.
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.
"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"


[tool.pyright]
include = ["rolebot"]
typeCheckingMode = "strict"
pythonVersion = "3.12"
